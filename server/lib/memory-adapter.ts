/**
 * ูุญุงูู ูู ุงูุฐุงูุฑุฉ ููุญูู Drizzle
 * ูุณูุญ ุจุงุณุชุฎุฏุงู ุงูุชุทุจูู ุจุฏูู ุงุชุตุงู ูุงุนุฏุฉ ุจูุงูุงุช ูุนููุฉ
 * 
 * ูุฐุง ูููุฏ ููุชุทููุฑ ุงููุญูู ูุฃุบุฑุงุถ ุงูุนุฑุถ ุงูุชูุถูุญู
 */

// ุฎุฑูุทุฉ ูุชุฎุฒูู ุงูุจูุงูุงุช ูู ุงูุฐุงูุฑุฉุ ูุณุชุฎุฏูุฉ ููุงุนุฏุฉ ุจูุงูุงุช ุจุณูุทุฉ
const memoryStore = new Map<string, any[]>();

// ุตุงูุน ูุนุฑูุงุช ูุฑูุฏุฉ ููุณุฌูุงุช ุงูุฌุฏูุฏุฉ
let idCounter = 1;

// ุชุตุฏูุฑ ุฏุงูุฉ ุฅูุดุงุก ุงููุญุงูู
export function memoryDrizzleAdapter() {
  return {
    /**
     * ูููุฐ ุงุณุชุนูุงูุงุช ุงูุงุฎุชูุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
     */
    query: async ({ sql, params = [] }: { sql: string; params?: any[] }) => {
      console.log('[MEMORY_DB] ุชูููุฐ ุงุณุชุนูุงู:', sql);
      
      // ุชุญููู ุงูุฌุฏูู ูู ุงูุงุณุชุนูุงู
      let tableName = '';
      const match = sql.match(/FROM\s+([^\s]+)/i);
      if (match && match[1]) {
        tableName = match[1].replace(/[\"\[\]`\.']+/g, '');
      }
      
      // ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุฌุฏูู
      if (!memoryStore.has(tableName)) {
        memoryStore.set(tableName, []);
      }
      
      // ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ูู ุงููุฎุฒู
      const tableData = memoryStore.get(tableName) || [];
      
      // ุงูุชุนุงูู ูุน ุงุณุชุนูุงูุงุช COUNT
      if (sql.includes('COUNT(*)')) {
        return { rows: [{ count: tableData.length }] };
      }
      
      // ูุญุงูุงุฉ ุงุณุชุนูุงูุงุช ุงุฎุชูุงุฑ ูุฎุชููุฉ ุจูุงุกู ุนูู ุงูููุท
      if (sql.includes('WHERE') && params.length > 0) {
        // ูุญุงูุงุฉ ุงุณุชุนูุงู ุจุดุฑูุท
        const whereMatch = sql.match(/WHERE\s+([^\s]+)\s*=\s*\?/i);
        if (whereMatch && whereMatch[1]) {
          const fieldName = whereMatch[1].replace(/[\"\[\]`\.']+/g, '');
          const value = params[0];
          
          // ุจุญุซ ุจุณูุท ุนู ุชุทุงุจู
          const results = tableData.filter(row => row[fieldName] === value);
          return { rows: results };
        }
      }
      
      // ููุงุณุชุนูุงูุงุช ุงูุจุณูุทุฉุ ูุนูุฏ ูู ุงูุตููู
      return { rows: tableData };
    },
    
    /**
     * ูููุฐ ุงุณุชุนูุงูุงุช ุงูุฅุฏุฑุงุฌ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
     */
    insert: async ({ 
      tableName, 
      values 
    }: { 
      tableName: string; 
      values: Record<string, any>[] 
    }) => {
      console.log(`[MEMORY_DB] ุฅุฏุฑุงุฌ ูู ุงูุฌุฏูู ${tableName}:`, values);
      
      // ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุฌุฏูู
      if (!memoryStore.has(tableName)) {
        memoryStore.set(tableName, []);
      }
      
      const tableData = memoryStore.get(tableName) || [];
      const insertedRows: any[] = [];
      
      // ูุนุงูุฌุฉ ูู ุณุฌู ููุฅุฏุฑุงุฌ
      values.forEach(value => {
        // ุฅุถุงูุฉ ูุนุฑู ูุฑูุฏ ุฅุฐุง ูู ููู ููุฌูุฏูุง
        const rowWithId = { 
          ...value, 
          id: value.id || idCounter++, 
          createdAt: value.createdAt || new Date(),
          updatedAt: value.updatedAt || new Date()
        };
        
        // ุฅุถุงูุฉ ุฅูู ุงููุฎุฒู
        tableData.push(rowWithId);
        insertedRows.push(rowWithId);
      });
      
      // ุชุญุฏูุซ ุงููุฎุฒู
      memoryStore.set(tableName, tableData);
      
      return { rows: insertedRows };
    },
    
    /**
     * ูููุฐ ุงุณุชุนูุงูุงุช ุงูุชุญุฏูุซ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
     */
    update: async ({ 
      tableName, 
      set, 
      where 
    }: { 
      tableName: string; 
      set: Record<string, any>;
      where?: any;
    }) => {
      console.log(`[MEMORY_DB] ุชุญุฏูุซ ุงูุฌุฏูู ${tableName}:`, { set, where });
      
      // ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุฌุฏูู
      if (!memoryStore.has(tableName)) {
        return { rows: [] };
      }
      
      let tableData = memoryStore.get(tableName) || [];
      const updatedRows: any[] = [];
      
      // ูุญุงูุงุฉ ุชุญุฏูุซ ุจุณูุท ุจุงุณุชุฎุฏุงู ูุนุฑู
      if (where && where.id) {
        const id = where.id;
        tableData = tableData.map(row => {
          if (row.id === id) {
            const updatedRow = { 
              ...row, 
              ...set, 
              updatedAt: new Date() 
            };
            updatedRows.push(updatedRow);
            return updatedRow;
          }
          return row;
        });
        
        // ุชุญุฏูุซ ุงููุฎุฒู
        memoryStore.set(tableName, tableData);
      }
      
      return { rows: updatedRows };
    },
    
    /**
     * ูููุฐ ุงุณุชุนูุงูุงุช ุงูุญุฐู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
     */
    delete: async ({ 
      tableName, 
      where 
    }: { 
      tableName: string; 
      where?: any;
    }) => {
      console.log(`[MEMORY_DB] ุญุฐู ูู ุงูุฌุฏูู ${tableName}:`, where);
      
      // ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุฌุฏูู
      if (!memoryStore.has(tableName)) {
        return { rows: [] };
      }
      
      const tableData = memoryStore.get(tableName) || [];
      const deletedRows: any[] = [];
      
      // ูุญุงูุงุฉ ุญุฐู ุจุณูุท ุจุงุณุชุฎุฏุงู ูุนุฑู
      if (where && where.id) {
        const id = where.id;
        const rowToDelete = tableData.find(row => row.id === id);
        
        if (rowToDelete) {
          deletedRows.push(rowToDelete);
          
          // ุชุญุฏูุซ ุงููุฎุฒู
          memoryStore.set(tableName, tableData.filter(row => row.id !== id));
        }
      }
      
      return { rows: deletedRows };
    },
    
    /**
     * ุชูููุฐ ุงุณุชุนูุงู SQL ูุฎุตุต
     */
    execute: async (query: { sql: string; params?: any[] }) => {
      console.log('[MEMORY_DB] ุชูููุฐ SQL ูุฎุตุต:', query);
      return { rows: [] };
    },
    
    /**
     * ุชูุธูู ุงูููุงุฑุฏุ ูุง ููุนู ุดูุฆูุง ูู ุงูุฐุงูุฑุฉ
     */
    cleanup: async () => {
      // ูุง ุดูุก ููุชูุธูู ูู ูุญุงูู ุงูุฐุงูุฑุฉ
    }
  };
}

// ุฅุถุงูุฉ ุจุนุถ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ ูุงุฎุชุจุงุฑ ูุธุงู ุงููุณุชุฎุฏู
memoryStore.set('users', [
  {
    id: 1,
    username: 'admin',
    password: '$2a$10$Ftb/e5Sbp/F6zxOFNrHJDu52X.VYOcD32HXxVxWZW3C/KmG/VfLOq', // 700700
    fullName: 'ูุฏูุฑ ุงููุธุงู',
    email: 'admin@example.com',
    isAdmin: true,
    active: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }
]);

// ุฅุถุงูุฉ ุจูุงูุงุช ุงูุชุฑุงุถูุฉ ูููุฆุงุช
memoryStore.set('categories', [
  {
    id: 1,
    name: 'ุดูุงุฏุงุช ุชูุฏูุฑ',
    slug: 'appreciation',
    description: 'ุดูุงุฏุงุช ุชูุฏูุฑ ูุชููุนุฉ',
    displayOrder: 1,
    icon: '๐',
    active: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }
]);

// ุฅุถุงูุฉ ุจูุงูุงุช ุงูุชุฑุงุถูุฉ ููููุงูุจ
memoryStore.set('templates', [
  {
    id: 1,
    title: 'ุดูุงุฏุฉ ุชูุฏูุฑ ูููุฐุฌูุฉ',
    description: 'ูุงูุจ ุดูุงุฏุฉ ุชูุฏูุฑ ุฑุณูู',
    categoryId: 1,
    imageUrl: '/static/certificate-template-1.jpg',
    active: true,
    bgColor: '#ffffff',
    createdAt: new Date(),
    updatedAt: new Date()
  }
]);